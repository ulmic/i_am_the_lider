= stylesheet_link_tag "participant/events"
%script{src: "//maps.google.com/maps/api/js?v=3.13&sensor=false&libraries=geometry", type: "text/javascript"}
%script{src: "//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js", type: "text/javascript"}
= javascript_include_tag "participant/events"
- model_class = Event
.page-header
  %h1
    = @event.title
.row-fluid
  .span6
    %p
      %strong= model_class.human_attribute_name(:goal) + ':'
      %br
      = @event.goal
    %p
      %strong= model_class.human_attribute_name(:tasks) + ':'
      %br
      = @event.tasks
    %p
      %strong= model_class.human_attribute_name(:participant_category) + ':'
      %br
      = @event.participant_category
    %p
      %strong= model_class.human_attribute_name(:description) + ':'
      %br
      = @event.description
    %p
      %strong= model_class.human_attribute_name(:adress) + ':'
      %br
      = @event.adress
  .span6
    .row
      .button{ onclick: "return location.href = '#{user_path(@event.user)}'" }
        = image_tag @event.user.avatar.mini_thumb_fill
        = @event.user.decorate.small_name
      - if @event.user.twitter?
        .button{ onclick: "return location.href = '#{@event.user.twitter}'" }
          = image_tag "social/twitter.png"
          = @event.user.decorate.twitter_account
    .row
      .well.begin_date
        %h2
          = Russian::strftime(@event.begin_date, "%e %B %Y %R")
    .row
      .well
        %h2
          = @event.adress
    -#.row
      %div{style: "width: 800px;"}
        #google_map{style: "width: 800px; height: 400px;"}
:javascript
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'google_map'}}, function(){
    markers = handler.addMarkers([
      {
        "lat": #{@event.latitude},
        "lng": #{@event.longtitude},
        "picture": {
          "url": "https://addons.cdn.mozilla.net/img/uploads/addon_icons/13/13028-64.png",
          "width":  36,
          "height": 36
        },
        "infowindow": "hello!"
      }
    ]);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });
